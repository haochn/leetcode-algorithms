import java.util.Arrays;

/**
 * 924. 尽量减少恶意软件的传播
 * 给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图 graph 表示。在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够直接连接到另一个节点 j。
 * 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染
 */
public class MinimizeMalwareSpread {

    private boolean[] visited;
    private int[][] adjMatrix;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);

        this.adjMatrix = graph;

        int clean = 0;
        int result = initial[0];
        boolean[][] initialVisited = new boolean[initial.length][graph.length];
        for (int i = 0; i < initial.length; i++) {
            visited = new boolean[graph.length];
            dfs(initial[i]);
            initialVisited[i] = visited;

        }
        boolean[][] ints = transformMatrix(initialVisited);
        for (int i = 0; i < ints.length; i++) {
            int cnt = 0;
            for (boolean b : ints[i]) {
                if (!b) {
                    cnt++;
                }
            }
            if (cnt > clean) {
                clean = cnt;
                result = initial[i];
            }
        }

        return result;
    }

    public void dfs(int vertex) {
        visited[vertex] = true;

        for (int i = 0; i < adjMatrix[vertex].length; i++) {
            if (adjMatrix[vertex][i] > 0 && !visited[i]) {
                dfs(i);
            }
        }
    }

    public boolean[][] transformMatrix(boolean[][] a) {
        int m = a.length;    // 矩阵a的行数
        int n = a[0].length; // 矩阵a的列数

        // 初始化结果矩阵b，具有m行n列
        boolean[][] b = new boolean[m][n];

        // 遍历矩阵a的每一行
        for (int i = 0; i < m; i++) {
            // 对于矩阵a的每一列
            for (int j = 0; j < n; j++) {
                b[i][j] = false; // 初始化当前元素
                // 对于矩阵a的每一行，除了当前行i
                for (int k = 0; k < m; k++) {
                    if (k != i) {
                        b[i][j] |= a[k][j]; // 进行逻辑或操作
                    }
                }
            }
        }

        return b;
    }

    public static void main(String[] args) {
        int[][] matrix = {
//                {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
//                {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
//                {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
//                {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
//                {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
//                {0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0},
//                {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
//                {0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0},
                {1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = {0, 1, 2};

        MinimizeMalwareSpread minimizeMalwareSpread = new MinimizeMalwareSpread();
        System.out.println(minimizeMalwareSpread.minMalwareSpread(matrix, initial));
    }
}
